Term 1
Introduction
Meet the instructors — Sebastian Thrun, Ryan Keenan, and myself. Learn about the systems that comprise a self-driving car, and the structure of the program.
Project: Detect Lane Lines
Detect highway lane lines from a video stream. Use OpenCV image analysis techniques to identify lines, including Hough transforms and Canny edge detection.
Deep Learning
Machine Learning: Review fundamentals of machine learning, including regression and classification.
Neural Networks: Learn about perceptrons, activation functions, and basic neural networks. Implement your own neural network in Python.
Logistic Classifier: Study how to train a logistic classifier, using machine learning. Implement a logistic classifier in TensorFlow.
Optimization: Investigate techniques for optimizing classifier performance, including validation and test sets, gradient descent, momentum, and learning rates.
Rectified Linear Units: Evaluate activation functions and how they affect performance.
Regularization: Learn techniques, including dropout, to avoid overfitting a network to the training data.
Convolutional Neural Networks: Study the building blocks of convolutional neural networks, including filters, stride, and pooling.
Project: Traffic Sign Classification
Implement and train a convolutional neural network to classify traffic signs. Use validation sets, pooling, and dropout to choose a network architecture and improve performance.
Keras: Build a multi-layer convolutional network in Keras. Compare the simplicity of Keras to the flexibility of TensorFlow.
Transfer Learning: Finetune pre-trained networks to solve your own problems. Study cannonical networks such as AlexNet, VGG, GoogLeNet, and ResNet.
Project: Behavioral Cloning
Architect and train a deep neural network to drive a car in a simulator. Collect your own training data and use it to clone your own driving behavior on a test track.
Computer Vision
Cameras: Learn the physics of cameras, and how to calibrate, undistort, and transform image perspectives.
Lane Finding: Study advanced techniques for lane detection with curved roads, adverse weather, and varied lighting.
Project: Advanced Lane Detection
Detect lane lines in a variety of conditions, including changing road surfaces, curved roads, and variable lighting. Use OpenCV to implement camera calibration and transforms, as well as filters, polynomial fits, and splines.
Support Vector Machines: Implement support vector machines and apply them to image classification.
Decision Trees: Implement decision trees and apply them to image classification.
Histogram of Oriented Gradients: Implement histogram of oriented gradients and apply it to image classification.
Deep Neural Networks: Compare the classification performance of support vector machines, decision trees, histogram of oriented gradients, and deep neural networks.
Vehicle Tracking: Review how to apply image classification techniques to vehicle tracking, along with basic filters to integrate vehicle position over time.
Project: Vehicle Tracking
Track vehicles in camera images using image classifiers such as SVMs, decision trees, HOG, and DNNs. Apply filters to fuse position data.



Term 2
Sensor Fusion
Sensors: Learn how lidar and radar work.
Kalman Filter: Use probability distributions to fuse lidar and radar data together.
C++ Tutorial: Review the key C++ concepts for implementing the Term 2 projects.
Kalman Filter in C++: Build high performance filters.
Project: Pedestrian Tracking
Fuse sanitized lidar and radar data together to track a pedestrian.
Unscented Kalman Filter: Fuse sensor nonlinear measurements.
Project: Pedestrian Tracking
Fuse real-world lidar and radar data together to track a pedestrian.
Localization
Motion: Study how motion and probability affect your belief about where you are in the world.
Markov Localization: Use a Bayesian filter to localize the vehicle.
Bayesian Filter: Implement a Bayesian filter for localization.
Egomotion: Estimate the position of the car over time given different sensor data.
Sampling for Localization: Use a particle filter to localize the vehicle.
Particle Filter: Implement a particle filter in C++.
Project: Kidnapped Vehicle
Implement a particle filter to take real-world data and localize a lost vehicle.
Control
Stability: Investigate the properties of stable and unstable systems.
Open-Loop Control: Implement a controller in which the actuation is independent of the controller output.
Closed-Loop Control: Implement a controller in which the actuation is dependent on the controller output.
PID Controller: Implement a Proportional-Integral-Derivative controller.
Linear Quadratic Regulator: Optimize the PID controller using a quadratic system of equations.
Project: Lane-Keeping
Implement a controller to overcome disturbances and keep a simulated vehicle in its lane.
